name: ${{ parameters.major }}.${{ parameters.minor }}$(rev:.r)

pr: none
trigger:
  branches:
    include:
    - main
  paths:
    include:
    # REQUIRED : suppose we are releasing the sample-app
    - /deploy/

parameters:
- name: major
  displayName: Major Version
  type: string
  default: 1
- name: minor
  displayName: Minor Version
  type: string
  default: 0
- name: loggingLevel
  displayName: Logging Level
  type: string
  default: Pipeline
  values:
  - Pipeline
  - Debug
- name: buildConfiguration
  displayName: Build Configuration
  type: string
  default: Release
- name: targetFramework
  displayName: Target Framework
  type: string
  default: netcoreapp3.1

pool:
  vmImage: ubuntu-latest'

stages:
- stage: Package
  displayName: Package
  dependsOn: []
  jobs:
  - job: validate_and_publish
    displayName: Validate & Publish Artifact
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Validation
    - ${{ if eq(parameters.loggingLevel, 'Debug') }}:
      - task: CmdLine@2
        displayName: "[Debug]"
        inputs:
          script: 'ls -R $(Pipeline.Workspace)'
    - task: CmdLine@2
      displayName: Install jsonlint
      inputs:
        script: 'sudo npm install -g jsonlint-cli'
    - task: CmdLine@2
      displayName: Lint JSON files
      inputs:
        script: 'jsonlint-cli $(Pipeline.Workspace)/s/deploy/**.json'
    
    # TODO: Build your app    
  - job: DotNetCore
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: restore
        projects: 'src\Application\Devops.App.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build and Package Application'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src\Application\Devops.App\Devops.App.csproj'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --framework ${{ parameters.targetFramework }}'
        zipAfterPublish: True
        modifyOutputPath: false

    - task: CopyFiles@2
      displayName: 'Copy Application Package'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)\src\Application\Devops.App\bin\${{ parameters.buildConfiguration }}\${{ parameters.targetFramework }}'
        Contents: '**\*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)\Packages'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifacts'
      inputs:
        path: '$(Build.ArtifactStagingDirectory)\Packages'
        artifact: Api

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Scripts'
      inputs:
        path: deploy/scripts
        artifact: Scripts
    # TODO: Your verification steps here

    # Publish
    - task: CopyFiles@2
      displayName: Copy ARM templates
      inputs:
        SourceFolder: deploy
        Contents: |
          armtemplate.json
          armtemplate.parameters.json
          storage.json
          storage.parameters.json
          app-service-plan.json
          app-service-plan.parameters.json
          app-service.json
          app-service.parameters.json
          key-vault.json
          key-vault.parameters.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)/artifact/arm'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/artifact'
        artifact: 'artifact'
        publishLocation: 'pipeline'