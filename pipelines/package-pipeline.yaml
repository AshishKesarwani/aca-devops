name: ${{ parameters.major }}.${{ parameters.minor }}$(rev:.r)

pr: none
trigger:
  branches:
    include:
    - main
  paths:
    include:
    # REQUIRED : suppose we are releasing the sample-app
    - /deploy/

parameters:
- name: major
  displayName: Major Version
  type: string
  default: 1
- name: minor
  displayName: Minor Version
  type: string
  default: 0
- name: loggingLevel
  displayName: Logging Level
  type: string
  default: Pipeline
  values:
  - Pipeline
  - Debug
- name: buildConfiguration
  displayName: Build Configuration
  type: string
  default: Release
- name: dotNetVersion
  type: string
  default: 3.x
- name: targetFramework
  displayName: Target Framework
  type: string
  default: netcoreapp3.1
variables:
- name: vmImageName
  value: 'windows-latest'
pool:
  vmImage: $(VmImage)

stages:
- stage: Package
  displayName: Package
  dependsOn: []
  jobs:
  - job: validate_and_publish
    displayName: Validate & Publish Artifact
    pool:
      vmImage: '$(VmImage)'
    #steps:
    # Validation
    #- ${{ if eq(parameters.loggingLevel, 'Debug') }}:
    #  - task: CmdLine@2
    #    displayName: "[Debug]"
    #    inputs:
    #      script: 'ls -R $(Pipeline.Workspace)'
    #- task: CmdLine@2
    #  displayName: Install jsonlint
    #  inputs:
    #    script: 'sudo npm install -g jsonlint-cli'
    #- task: CmdLine@2
    #  displayName: Lint JSON files
    #  inputs:
    #    script: 'jsonlint-cli $(Pipeline.Workspace)/s/deploy/**.json'

    # TODO: Build your app    
  - job: DotNetCore
    pool:
      vmImage: '$(VmImage)'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core sdk'
      inputs:
        packageType: sdk
        version: '${{ parameters.dotNetVersion }}'
    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: restore
        projects: 'src/Application/DevOps.App.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Build and Package Application'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/Application/DevOps.App/DevOps.App.csproj'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --framework ${{ parameters.targetFramework }}'
        zipAfterPublish: True
        modifyOutputPath: false

    - task: CopyFiles@2
      displayName: 'Copy Application Package'
      inputs:
        SourceFolder: 'src/Application/DevOps.App/bin/${{ parameters.buildConfiguration }}/${{ parameters.targetFramework }}'
        Contents: '**/*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Packages'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Scripts'
      inputs:
        path: deploy/scripts
        artifact: Scripts
    # TODO: Your verification steps here
    # Publish
    - task: CopyFiles@2
      displayName: Copy ARM templates
      inputs:
        SourceFolder: deploy
        Contents: |
          armtemplate.json
          armtemplate.parameters.json
          azure-infrastructure.json
          azure-infrastructure.parameters.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Packages'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Arm templates'
      inputs:
        path: '$(Build.ArtifactStagingDirectory)/Packages'
        artifact: artifact 

