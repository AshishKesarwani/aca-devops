name: ${{ parameters.major }}.${{ parameters.minor }}$(rev:.r)

pr: none
trigger:
  branches:
    include:
    - feat/net6
  paths:
    include:
    # REQUIRED : suppose we are releasing the sample-app
    - /deploy/
    - /src/

parameters:
- name: major
  displayName: Major Version
  type: string
  default: 1
- name: minor
  displayName: Minor Version
  type: string
  default: 0
- name: loggingLevel
  displayName: Logging Level
  type: string
  default: Pipeline
  values:
  - Pipeline
  - Debug

variables:
- name: vmImage
  value: 'ubuntu-latest'
- name: buildConfiguration
  value: 'Release'
- name: workingDirectory
  value: '$(System.DefaultWorkingDirectory)/src/Application'
- name: solutionFile  
  value: 'DevOps.App.sln'
- name: appName
  value: 'DevOps.App'
  dotNetFramework: 'net6.0'
  dotNetVersion: '6.0.x'
  targetRuntime: 'linux-x64'

pool:
  vmImage: $(vmImage)

stages:
- stage: Package
  displayName: Package
  dependsOn: []
  jobs:
  - job: validate_and_publish
    displayName: Validate & Publish Artifact
    steps:
    # Validation    
    - task: CmdLine@2
      condition: eq('${{parameters['loggingLevel']}}', 'Debug')
      displayName: "[Debug]"
      inputs:
        script: 'ls -R $(Pipeline.Workspace)'
    - task: CmdLine@2
      displayName: Install jsonlint
      inputs:
        script: 'sudo npm install -g jsonlint-cli'
    - task: CmdLine@2
      displayName: Lint JSON files
      inputs:
        script: 'jsonlint-cli $(Pipeline.Workspace)/s/deploy/**.json'
    
    # Build your app  
    - task: UseDotNet@2 
      displayName: "Use .NET Core sdk"
      inputs:
        packageType: 'sdk'
        verrsion: '6.0.x'
        includePreviewVersions: true
    #- task: DotNetCoreCLI@2
    #  displayName: 'Restore Dependencies'
    #  inputs:
    #    command: 'restore'
    #    projects: '$(workingDirectory)/$(solutionFile)'
    # Build the app for .NET 6 framework
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET 6 Application'
      inputs:
        command: 'build'
        version: $(dotNetVersion)
        projects: '$(workingDirectory)/$(appName)/$(appName).csproj'
        arguments: '--restore --configuration $(buildConfiguration)'
    # Build the app for .NET 6 framework
    #- task: UseDotNet@2
    #  inputs:
    #    version: $(dotNetVersion)
    #    includePreviewVersions: true
    #- script: dotnet build --configuration $(buildConfiguration)
    #  displayName: 'Build .NET 6 Application'

    #- task: DotNetCoreCLI@2  
    #  displayName: 'Test'  
    #  inputs:
    #    command: test
    #    projects: '**/Test/*Tests/*.csproj'
    #    arguments: '--configuration $(buildConfiguration)'
    # Publish it as .NET 6 self-contained application for linux runtime
    - task: DotNetCoreCLI@2
      inputs:
        command: publish
        publishWebProjects: True
        arguments: '--configuration $(BuildConfiguration) --framework $(dotNetFramework) --runtime $(targetRuntime) --self-contained --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    #- task: DotNetCoreCLI@2
    #  displayName: Publish
    #  inputs:
    #    command: 'publish'
    #    projects: |
    #      $(workingDirectory)/$(appName)/$(appName).csproj
    #    arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration $(buildConfiguration) -r linux-x64 
    # Package the file and uploads them as an artifact of the build
    #- task: ArchiveFiles@2
    #  displayName: 'Archive files'
    #  inputs:
    #    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
    #    includeRootFolder: false
    #    archiveType: zip
    #    archiveFile: $(Build.ArtifactStagingDirectory)/artifact/package/$(Build.BuildId).zip
    #    replaceExistingArchive: true 

    # Publish
    - task: CopyFiles@2
      displayName: Copy ARM templates
      inputs:
        SourceFolder: deploy
        Contents: |
          azure-infrastructure.json
          azure-infrastructure.parameters.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)/artifact/arm'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/artifact'
        artifact: 'artifact'
        publishLocation: 'pipeline'
