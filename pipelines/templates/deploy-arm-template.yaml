parameters:
  azureResourceManagerConnection: ''
  subscriptionId: ''
  resourceGroupName: ''
  artifactFolder: '$(Pipeline.Workspace)/package_build/artifact'
  location: ''
  loggingLevel: ''

steps:
- ${{ if eq(parameters.loggingLevel, 'Debug') }}:
  - task: CmdLine@2
    displayName: "[Debug] Output artifact structure"
    inputs:
      script: 'ls ${{parameters.artifactFolder}}'

- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: Replace Tokens in ARM template
  inputs:
    rootDirectory: '${{parameters.artifactFolder}}/arm/'
    targetFiles: '*.json'
    encoding: 'auto'
    writeBOM: true
    verbosity: 'detailed'
    actionOnMissing: 'fail'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'

# Show ARM template & parameter values before deployment
- ${{ if eq(parameters.loggingLevel, 'Debug') }}:
  - task: PowerShell@2
    displayName: '[Debug] Output ARM templates that will be deployed'
    inputs:
      targetType: inline
      script: |
        $files = Get-ChildItem -Path ${{parameters.artifactFolder}}\arm\*.json
        foreach ($file in $files)
        {
          Write-Host "=== ARM template Output ==="
          Write-Host "Filename: ($file)" 
          $content = Get-Content $file
          Write-Host $content
        }

# Deploy through ARM
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Deploy ARM template on ${{parameters.resourceGroupName}}'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '${{parameters.azureResourceManagerConnection}}'
    subscriptionId: '${{parameters.subscriptionId}}'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '${{parameters.resourceGroupName}}'
    location: '${{parameters.location}}'
    templateLocation: 'Linked artifact'
    csmFile: '${{parameters.artifactFolder}}/arm/armtemplate.json'
    csmParametersFile: '${{parameters.artifactFolder}}/arm/armtemplate.parameters.json'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'ArmOutputs'
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Deploy ARM storage template on ${{parameters.resourceGroupName}}'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '${{parameters.azureResourceManagerConnection}}'
    subscriptionId: '${{parameters.subscriptionId}}'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '${{parameters.resourceGroupName}}'
    location: '${{parameters.location}}'
    templateLocation: 'Linked artifact'
    csmFile: '${{parameters.artifactFolder}}/arm/storage.json'
    csmParametersFile: '${{parameters.artifactFolder}}/arm/storage.parameters.json'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'armOutputs'

- pwsh: |
    $outputsObject = $env:ARM_OUTPUTS | ConvertFrom-Json
    Write-Host "##vso[task.setvariable variable=StorageAccountName]$($outputsObject.StorageAccountName.value)"
  displayName: 'Parse ARM deploymentOutputs | pwsh'
  env:
    ARM_OUTPUTS: $(armOutputs)
- script: echo $(StorageAccountName)
  displayName: 'Log StorageAccountName'
#- task: AzurePowerShell@5
#  inputs:
#    azureSubscription: 'TrainingAccountSP'
#    ScriptType: 'InlineScript'
#    Inline: |
#      ## database_arm is already a pipeline variable returned via the ARM deployment
#      	## task's deploymentOutputs attribute
#      	$armOutputObj = $(storage_outputs) | convertfrom-json
#      	$armOutputObj.PSObject.Properties | ForEach-Object {
#          $keyname = $_.Name
#          $value = $_.Value.value
      
#          ## Creates a standard pipeline variable
#          Write-Output "##vso[task.setvariable variable=$keyName;]$value"
#     		
#          ## Creates an output variable
#          Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value"
#      	}
#    azurePowerShellVersion: LatestVersion
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Deploy ARM keyvault template on ${{parameters.resourceGroupName}}'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '${{parameters.azureResourceManagerConnection}}'
    subscriptionId: '${{parameters.subscriptionId}}'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '${{parameters.resourceGroupName}}'
    location: '${{parameters.location}}'
    templateLocation: 'Linked artifact'
    csmFile: '${{parameters.artifactFolder}}/arm/key-vault.json'
    csmParametersFile: '${{parameters.artifactFolder}}/arm/key-vault.parameters.json'
    deploymentMode: 'Incremental'
    deploymentOutputs: keyvault_outputs
#- task: AzurePowerShell@5
#  inputs:
#    azureSubscription: 'TrainingAccountSP'
#    ScriptType: 'InlineScript'
#    Inline: |
#      ## database_arm is already a pipeline variable returned via the ARM deployment
#      	## task's deploymentOutputs attribute
#      	$armOutputObj = $env:keyvault_outputs | convertfrom-json
#      	$armOutputObj.PSObject.Properties | ForEach-Object {
#          $keyname = $_.Name
#          $value = $_.Value.value
      
#          ## Creates a standard pipeline variable
#          Write-Output "##vso[task.setvariable variable=$keyName;]$value"
#     		
#          ## Creates an output variable
#          Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value"
#      	}
#    azurePowerShellVersion: LatestVersion

#- task: SqlAzureDacpacDeployment@1
#  displayName: 'Execute Azure SQL : InlineSqlTask'
#  inputs:
#    azureSubscription: 'TrainingAccountSP'
#    AuthenticationType: 'server'
#    ServerName: 'sqlsvrdemo'
#    DatabaseName: 'sqldbdemo'
#    SqlUsername: 'sqluser'
#    SqlPassword: $(adminPassword)
#    deployType: 'InlineSqlTask'
#    SqlInline: |
#      USE [main]
#        GO
#        IF NOT EXISTS (SELECT name FROM main.sys.databases WHERE name = N'DatabaseExample')
#        CREATE DATABASE [DatabaseExample]
#        GO
#    IpDetectionMethod: AutoDetect@3 
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'Deploy ARM app service plan template on ${{parameters.resourceGroupName}}'
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: '${{parameters.azureResourceManagerConnection}}'
    subscriptionId: '${{parameters.subscriptionId}}'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '${{parameters.resourceGroupName}}'
    location: '${{parameters.location}}'
    templateLocation: 'Linked artifact'
    csmFile: '${{parameters.artifactFolder}}/arm/app-service-plan.json'
    csmParametersFile: '${{parameters.artifactFolder}}/arm/app-service-plan.parameters.json'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'armOutputs'

- pwsh: |
    $outputsObject = $env:ARM_OUTPUTS | ConvertFrom-Json
    Write-Host "##vso[task.setvariable variable=AppServicePlanName]$($outputsObject.AppServicePlanName.value)"
  displayName: 'Parse ARM deploymentOutputs | pwsh'
  env:
    ARM_OUTPUTS: $(armOutputs)
- script: echo $(StorageAccountName)
  displayName: 'Log AppServicePlanName'
